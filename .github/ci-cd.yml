name: CI/CD Pipeline – Frontend

on:
  pull_request:
    branches:
      - '**'
  push:
    branches:
      - main
    tags:
      - 'v*' # Nur für Versionstags (z.B. v1.0.0)

permissions:
  contents: read
  id-token: write # ← WICHTIG für Cosign ohne Schlüssel (keyless signing)

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}

  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
 
  NEXT_PUBLIC_BACKEND_SERVER_URL: ${{ secrets.NEXT_PUBLIC_BACKEND_SERVER_URL }}
  NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_KEYCLOAK_CLIENT_ID }}
  NEXT_PUBLIC_KEYCLOAK_CLIENT_SECRET: ${{ secrets.NEXT_PUBLIC_KEYCLOAK_CLIENT_SECRET }}
  NEXT_PUBLIC_KEYCLOAK_ISSUER: ${{ secrets.NEXT_PUBLIC_KEYCLOAK_ISSUER }}

  NEXT_PUBLIC_DEFAULT_ROUTE: ${{ secrets.NEXT_PUBLIC_DEFAULT_ROUTE }}
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      CURRENT_DATE: ${{ steps.set_date.outputs.CURRENT_DATE }}
    strategy:
      matrix:
        node-version: [23.10.0]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Compile TypeScript
        run: npx tsc

      - name: Set CURRENT_DATE
        id: set_date
        run: |
          DATE=$(date +'%Y-%m-%d')
          echo "CURRENT_DATE=$DATE" >> $GITHUB_OUTPUT

      - name: Aktualisiere CURRENT_DATE in Organisations-Variable (sicher)
        run: |
          CURRENT_DATE="${{ steps.set_date.outputs.CURRENT_DATE }}"

          if [ -z "$CURRENT_DATE" ]; then
            echo "Fehler: CURRENT_DATE ist leer!"
            exit 1
          fi

          ORG_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f1)

          EXISTING=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/orgs/${ORG_NAME}/actions/variables/CURRENT_DATE \
            | jq -r '.value')

          echo "Updating org-level CURRENT_DATE from $EXISTING to $CURRENT_DATE"

          if [ "$EXISTING" != "$CURRENT_DATE" ]; then
            curl -X PATCH \
              -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/orgs/${ORG_NAME}/actions/variables/CURRENT_DATE \
              -d "{\"value\": \"${CURRENT_DATE}\"}"
          else
            echo "CURRENT_DATE ist bereits aktuell: $CURRENT_DATE"
          fi

      - name: copy .next folder
        run: cp -r .next next_copy

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.node-version }}
          path: next_copy
          retention-days: 1

  package:
    name: 📦 Package Application
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        node-version: [23.10.0]
    if: github.actor == 'caleb-script' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ matrix.node-version }}
          path: .next

      - name: Package build for distribution
        run: zip -r next.zip .next

      - name: Upload packaged build
        uses: actions/upload-artifact@v4
        with:
          name: packaged-build
          path: next.zip

  docker:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [build, package]
    env:
      CURRENT_DATE: ${{ needs.build.outputs.CURRENT_DATE }}
    if: github.actor == 'caleb-script' && github.event_name == 'push'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .env file from secrets
        run: |
          echo "NEXT_PUBLIC_BACKEND_SERVER_URL=${{ env.NEXT_PUBLIC_BACKEND_SERVER_URL }}" >> .env
          echo "NEXT_PUBLIC_KEYCLOAK_CLIENT_ID=${{ env.NEXT_PUBLIC_KEYCLOAK_CLIENT_ID }}" >> .env
          echo "NEXT_PUBLIC_KEYCLOAK_CLIENT_SECRET=${{ env.NEXT_PUBLIC_KEYCLOAK_CLIENT_SECRET }}" >> .env
          echo "NEXT_PUBLIC_KEYCLOAK_ISSUER=${{ env.NEXT_PUBLIC_KEYCLOAK_ISSUER }}" >> .env
          echo "NEXT_PUBLIC_DEFAULT_ROUTE=${{ env.NEXT_PUBLIC_DEFAULT_ROUTE }}" >> .env
          echo "NEXTAUTH_URL=${{ env.NEXTAUTH_URL }}" >> .env
          echo "NEXTAUTH_SECRET=${{ env.NEXTAUTH_SECRET }}" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: image=moby/buildkit:latest
        
      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN}}
        
      - name: Set up Docker Cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ github.sha }}
          restore-keys: |
            buildx-
        
      - name: Build and Push Docker Image (GHCR)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository }}:${{ env.CURRENT_DATE }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
        


          